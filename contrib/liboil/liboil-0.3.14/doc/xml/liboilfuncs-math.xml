<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"
>
<refentry id="liboil-liboilfuncs-math">
<refmeta>
<refentrytitle role="top_of_page">Simple Arithmetic</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBOIL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Simple Arithmetic</refname>
<refpurpose>Aritmetic operations</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="void">void</link>                <link linkend="oil-abs-f32-f32">oil_abs_f32_f32</link>                     (<link linkend="float">float</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-abs-f64-f64">oil_abs_f64_f64</link>                     (<link linkend="double">double</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-abs-u16-s16">oil_abs_u16_s16</link>                     (<link linkend="uint16-t">uint16_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-abs-u32-s32">oil_abs_u32_s32</link>                     (<link linkend="uint32-t">uint32_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-abs-u8-s8">oil_abs_u8_s8</link>                       (<link linkend="uint8-t">uint8_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-average2-u8">oil_average2_u8</link>                     (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-multsum-f32">oil_multsum_f32</link>                     (<link linkend="float">float</link> *dest,
                                                         const <link linkend="float">float</link> *src1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *src2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-multsum-f64">oil_multsum_f64</link>                     (<link linkend="double">double</link> *dest,
                                                         const <link linkend="double">double</link> *src1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *src2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-f32">oil_scalaradd_f32</link>                   (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-f64">oil_scalaradd_f64</link>                   (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="double">double</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-s16">oil_scalaradd_s16</link>                   (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int16-t">int16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-s32">oil_scalaradd_s32</link>                   (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int32-t">int32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-s8">oil_scalaradd_s8</link>                    (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int8-t">int8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-u16">oil_scalaradd_u16</link>                   (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-u32">oil_scalaradd_u32</link>                   (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-u8">oil_scalaradd_u8</link>                    (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-f32">oil_scalarmult_f32</link>                  (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-f64">oil_scalarmult_f64</link>                  (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="double">double</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-s16">oil_scalarmult_s16</link>                  (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int16-t">int16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-s32">oil_scalarmult_s32</link>                  (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int32-t">int32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-s8">oil_scalarmult_s8</link>                   (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int8-t">int8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-u16">oil_scalarmult_u16</link>                  (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-u32">oil_scalarmult_u32</link>                  (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmult-u8">oil_scalarmult_u8</link>                   (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-f32">oil_vectoradd_f32</link>                   (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="float">float</link> *s3_1,
                                                         const <link linkend="float">float</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-f64">oil_vectoradd_f64</link>                   (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="double">double</link> *s3_1,
                                                         const <link linkend="double">double</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s16">oil_vectoradd_s16</link>                   (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int16-t">int16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int16-t">int16_t</link> *s3_1,
                                                         const <link linkend="int16-t">int16_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s32">oil_vectoradd_s32</link>                   (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int32-t">int32_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int32-t">int32_t</link> *s3_1,
                                                         const <link linkend="int32-t">int32_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s8">oil_vectoradd_s8</link>                    (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int8-t">int8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int8-t">int8_t</link> *s3_1,
                                                         const <link linkend="int8-t">int8_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-u16">oil_vectoradd_u16</link>                   (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint16-t">uint16_t</link> *s3_1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-u32">oil_vectoradd_u32</link>                   (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint32-t">uint32_t</link> *s3_1,
                                                         const <link linkend="uint32-t">uint32_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-u8">oil_vectoradd_u8</link>                    (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint8-t">uint8_t</link> *s3_1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s4_1);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-s8">oil_vectoradd_s_s8</link>                  (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int8-t">int8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-u8">oil_vectoradd_s_u8</link>                  (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-s16">oil_vectoradd_s_s16</link>                 (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int16-t">int16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-u16">oil_vectoradd_s_u16</link>                 (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-f32">oil_vectoradd_s_f32</link>                 (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-vectoradd-s-f64">oil_vectoradd_s_f64</link>                 (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-squaresum-f64">oil_squaresum_f64</link>                   (<link linkend="double">double</link> *d,
                                                         const <link linkend="double">double</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-squaresum-shifted-s16">oil_squaresum_shifted_s16</link>           (<link linkend="uint32-t">uint32_t</link> *d,
                                                         const <link linkend="int16-t">int16_t</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-sum-f64">oil_sum_f64</link>                         (<link linkend="double">double</link> *d_1,
                                                         const <link linkend="double">double</link> *s,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-add-f32">oil_add_f32</link>                         (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-divide-f32">oil_divide_f32</link>                      (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-floor-f32">oil_floor_f32</link>                       (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-inverse-f32">oil_inverse_f32</link>                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-maximum-f32">oil_maximum_f32</link>                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-minimum-f32">oil_minimum_f32</link>                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-multiply-f32">oil_multiply_f32</link>                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-negative-f32">oil_negative_f32</link>                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalaradd-f32-ns">oil_scalaradd_f32_ns</link>                (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-scalarmultiply-f32-ns">oil_scalarmultiply_f32_ns</link>           (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-sign-f32">oil_sign_f32</link>                        (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);
<link linkend="void">void</link>                <link linkend="oil-subtract-f32">oil_subtract_f32</link>                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="oil-abs-f32-f32" role="function"/>oil_abs_f32_f32 ()</title>
<indexterm><primary>oil_abs_f32_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_abs_f32_f32                     (<link linkend="float">float</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the absolute value of each element in the source array
and writes it into the destination array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of destination elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements in arrays
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-abs-f64-f64" role="function"/>oil_abs_f64_f64 ()</title>
<indexterm><primary>oil_abs_f64_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_abs_f64_f64                     (<link linkend="double">double</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the absolute value of each element in the source array
and writes it into the destination array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of destination elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements in arrays
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-abs-u16-s16" role="function"/>oil_abs_u16_s16 ()</title>
<indexterm><primary>oil_abs_u16_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_abs_u16_s16                     (<link linkend="uint16-t">uint16_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the absolute value of each element in the source array
and writes it into the destination array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of destination elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements in arrays
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-abs-u32-s32" role="function"/>oil_abs_u32_s32 ()</title>
<indexterm><primary>oil_abs_u32_s32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_abs_u32_s32                     (<link linkend="uint32-t">uint32_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the absolute value of each element in the source array
and writes it into the destination array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of destination elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements in arrays
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-abs-u8-s8" role="function"/>oil_abs_u8_s8 ()</title>
<indexterm><primary>oil_abs_u8_s8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_abs_u8_s8                       (<link linkend="uint8-t">uint8_t</link> *dest,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *src,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the absolute value of each element in the source array
and writes it into the destination array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> destination array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of destination elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements in arrays
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-average2-u8" role="function"/>oil_average2_u8 ()</title>
<indexterm><primary>oil_average2_u8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_average2_u8                     (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Averages each element in <parameter>s1</parameter> and <parameter>s2</parameter> and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This class is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-multsum-f32" role="function"/>oil_multsum_f32 ()</title>
<indexterm><primary>oil_multsum_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_multsum_f32                     (<link linkend="float">float</link> *dest,
                                                         const <link linkend="float">float</link> *src1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *src2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies each element in <parameter>src1</parameter> and <parameter>src2</parameter> and sums the results
over the entire array, and places the sum into <parameter>dest</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-multsum-f64" role="function"/>oil_multsum_f64 ()</title>
<indexterm><primary>oil_multsum_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_multsum_f64                     (<link linkend="double">double</link> *dest,
                                                         const <link linkend="double">double</link> *src1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *src2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies each element in <parameter>src1</parameter> and <parameter>src2</parameter> and sums the results
over the entire array, and places the sum into <parameter>dest</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-f32" role="function"/>oil_scalaradd_f32 ()</title>
<indexterm><primary>oil_scalaradd_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_f32                   (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-f64" role="function"/>oil_scalaradd_f64 ()</title>
<indexterm><primary>oil_scalaradd_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_f64                   (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="double">double</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-s16" role="function"/>oil_scalaradd_s16 ()</title>
<indexterm><primary>oil_scalaradd_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_s16                   (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int16-t">int16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-s32" role="function"/>oil_scalaradd_s32 ()</title>
<indexterm><primary>oil_scalaradd_s32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_s32                   (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int32-t">int32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-s8" role="function"/>oil_scalaradd_s8 ()</title>
<indexterm><primary>oil_scalaradd_s8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_s8                    (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int8-t">int8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-u16" role="function"/>oil_scalaradd_u16 ()</title>
<indexterm><primary>oil_scalaradd_u16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_u16                   (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-u32" role="function"/>oil_scalaradd_u32 ()</title>
<indexterm><primary>oil_scalaradd_u32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_u32                   (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-u8" role="function"/>oil_scalaradd_u8 ()</title>
<indexterm><primary>oil_scalaradd_u8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_u8                    (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-f32" role="function"/>oil_scalarmult_f32 ()</title>
<indexterm><primary>oil_scalarmult_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_f32                  (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-f64" role="function"/>oil_scalarmult_f64 ()</title>
<indexterm><primary>oil_scalarmult_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_f64                  (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="double">double</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-s16" role="function"/>oil_scalarmult_s16 ()</title>
<indexterm><primary>oil_scalarmult_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_s16                  (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int16-t">int16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-s32" role="function"/>oil_scalarmult_s32 ()</title>
<indexterm><primary>oil_scalarmult_s32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_s32                  (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int32-t">int32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-s8" role="function"/>oil_scalarmult_s8 ()</title>
<indexterm><primary>oil_scalarmult_s8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_s8                   (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="int8-t">int8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-u16" role="function"/>oil_scalarmult_u16 ()</title>
<indexterm><primary>oil_scalarmult_u16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_u16                  (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-u32" role="function"/>oil_scalarmult_u32 ()</title>
<indexterm><primary>oil_scalarmult_u32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_u32                  (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmult-u8" role="function"/>oil_scalarmult_u8 ()</title>
<indexterm><primary>oil_scalarmult_u8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmult_u8                   (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> to each value in <parameter>s1</parameter> and places the
result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-f32" role="function"/>oil_vectoradd_f32 ()</title>
<indexterm><primary>oil_vectoradd_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_f32                   (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="float">float</link> *s3_1,
                                                         const <link linkend="float">float</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-f64" role="function"/>oil_vectoradd_f64 ()</title>
<indexterm><primary>oil_vectoradd_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_f64                   (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="double">double</link> *s3_1,
                                                         const <link linkend="double">double</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s16" role="function"/>oil_vectoradd_s16 ()</title>
<indexterm><primary>oil_vectoradd_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s16                   (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int16-t">int16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int16-t">int16_t</link> *s3_1,
                                                         const <link linkend="int16-t">int16_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s32" role="function"/>oil_vectoradd_s32 ()</title>
<indexterm><primary>oil_vectoradd_s32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s32                   (<link linkend="int32-t">int32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int32-t">int32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int32-t">int32_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int32-t">int32_t</link> *s3_1,
                                                         const <link linkend="int32-t">int32_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s8" role="function"/>oil_vectoradd_s8 ()</title>
<indexterm><primary>oil_vectoradd_s8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s8                    (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int8-t">int8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="int8-t">int8_t</link> *s3_1,
                                                         const <link linkend="int8-t">int8_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-u16" role="function"/>oil_vectoradd_u16 ()</title>
<indexterm><primary>oil_vectoradd_u16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_u16                   (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint16-t">uint16_t</link> *s3_1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-u32" role="function"/>oil_vectoradd_u32 ()</title>
<indexterm><primary>oil_vectoradd_u32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_u32                   (<link linkend="uint32-t">uint32_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint32-t">uint32_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint32-t">uint32_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint32-t">uint32_t</link> *s3_1,
                                                         const <link linkend="uint32-t">uint32_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-u8" role="function"/>oil_vectoradd_u8 ()</title>
<indexterm><primary>oil_vectoradd_u8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_u8                    (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n,
                                                         const <link linkend="uint8-t">uint8_t</link> *s3_1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s4_1);</programlisting>
<para>
Multiplies the constant <parameter>s3_1</parameter> with each element of <parameter>s1</parameter> and
multiplies the constant <parameter>s4_1</parameter> with each element of <parameter>s2</parameter> and
adds the two results together and places the final result in
<parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s3_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s4_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-s8" role="function"/>oil_vectoradd_s_s8 ()</title>
<indexterm><primary>oil_vectoradd_s_s8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_s8                  (<link linkend="int8-t">int8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int8-t">int8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int8-t">int8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
of the type and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-u8" role="function"/>oil_vectoradd_s_u8 ()</title>
<indexterm><primary>oil_vectoradd_s_u8</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_u8                  (<link linkend="uint8-t">uint8_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint8-t">uint8_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint8-t">uint8_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
of the type and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-s16" role="function"/>oil_vectoradd_s_s16 ()</title>
<indexterm><primary>oil_vectoradd_s_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_s16                 (<link linkend="int16-t">int16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="int16-t">int16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="int16-t">int16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
of the type and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-u16" role="function"/>oil_vectoradd_s_u16 ()</title>
<indexterm><primary>oil_vectoradd_s_u16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_u16                 (<link linkend="uint16-t">uint16_t</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="uint16-t">uint16_t</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="uint16-t">uint16_t</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
of the type and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-f32" role="function"/>oil_vectoradd_s_f32 ()</title>
<indexterm><primary>oil_vectoradd_s_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_f32                 (<link linkend="float">float</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="float">float</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
[-1,1] and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-vectoradd-s-f64" role="function"/>oil_vectoradd_s_f64 ()</title>
<indexterm><primary>oil_vectoradd_s_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_vectoradd_s_f64                 (<link linkend="double">double</link> *d,
                                                         <link linkend="int">int</link> dstr,
                                                         const <link linkend="double">double</link> *s1,
                                                         <link linkend="int">int</link> sstr1,
                                                         const <link linkend="double">double</link> *s2,
                                                         <link linkend="int">int</link> sstr2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds each element of <parameter>s1</parameter> to <parameter>s2</parameter> and clamps the result to the range
[-1,1] and places the result in <parameter>d</parameter>.
</para>
<para>
FIXME: This function is difficult to optimize and will likely be
replaced.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dstr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-squaresum-f64" role="function"/>oil_squaresum_f64 ()</title>
<indexterm><primary>oil_squaresum_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_squaresum_f64                   (<link linkend="double">double</link> *d,
                                                         const <link linkend="double">double</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Sums the square of each element in <parameter>s</parameter> and places the result in
<parameter>dest</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-squaresum-shifted-s16" role="function"/>oil_squaresum_shifted_s16 ()</title>
<indexterm><primary>oil_squaresum_shifted_s16</primary></indexterm><programlisting><link linkend="void">void</link>                oil_squaresum_shifted_s16           (<link linkend="uint32-t">uint32_t</link> *d,
                                                         const <link linkend="int16-t">int16_t</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Square each element in <parameter>s</parameter> and divide by (1&lt;&lt;15), and sum the
results, placing the final result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-sum-f64" role="function"/>oil_sum_f64 ()</title>
<indexterm><primary>oil_sum_f64</primary></indexterm><programlisting><link linkend="void">void</link>                oil_sum_f64                         (<link linkend="double">double</link> *d_1,
                                                         const <link linkend="double">double</link> *s,
                                                         <link linkend="int">int</link> sstr,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Sums the elements in the source array and places the result in
<parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d_1</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> source array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sstr</parameter>&nbsp;:</term>
<listitem><simpara> stride of source elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-add-f32" role="function"/>oil_add_f32 ()</title>
<indexterm><primary>oil_add_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_add_f32                         (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds elements in <parameter>s2</parameter> and <parameter>s1</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-divide-f32" role="function"/>oil_divide_f32 ()</title>
<indexterm><primary>oil_divide_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_divide_f32                      (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Divides elements in <parameter>s1</parameter> by <parameter>s2</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-floor-f32" role="function"/>oil_floor_f32 ()</title>
<indexterm><primary>oil_floor_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_floor_f32                       (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the greatest integer less than or equal to each element
in <parameter>s</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-inverse-f32" role="function"/>oil_inverse_f32 ()</title>
<indexterm><primary>oil_inverse_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_inverse_f32                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the multiplicative inverse of each element in <parameter>s</parameter> and
places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-maximum-f32" role="function"/>oil_maximum_f32 ()</title>
<indexterm><primary>oil_maximum_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_maximum_f32                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Places the greater of <parameter>s1</parameter> and <parameter>s2</parameter> in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-minimum-f32" role="function"/>oil_minimum_f32 ()</title>
<indexterm><primary>oil_minimum_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_minimum_f32                     (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Places the lesser of <parameter>s1</parameter> and <parameter>s2</parameter> in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-multiply-f32" role="function"/>oil_multiply_f32 ()</title>
<indexterm><primary>oil_multiply_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_multiply_f32                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies elements in <parameter>s1</parameter> and <parameter>s2</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-negative-f32" role="function"/>oil_negative_f32 ()</title>
<indexterm><primary>oil_negative_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_negative_f32                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Negates each element in <parameter>s</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalaradd-f32-ns" role="function"/>oil_scalaradd_f32_ns ()</title>
<indexterm><primary>oil_scalaradd_f32_ns</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalaradd_f32_ns                (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Adds the constant value <parameter>s2_1</parameter> to each source element and places
the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-scalarmultiply-f32-ns" role="function"/>oil_scalarmultiply_f32_ns ()</title>
<indexterm><primary>oil_scalarmultiply_f32_ns</primary></indexterm><programlisting><link linkend="void">void</link>                oil_scalarmultiply_f32_ns           (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2_1,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Multiplies the constant value <parameter>s2_1</parameter> and each source element and places
the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2_1</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-sign-f32" role="function"/>oil_sign_f32 ()</title>
<indexterm><primary>oil_sign_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_sign_f32                        (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Calculates the sign of each element in <parameter>s</parameter> and
places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> source
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="oil-subtract-f32" role="function"/>oil_subtract_f32 ()</title>
<indexterm><primary>oil_subtract_f32</primary></indexterm><programlisting><link linkend="void">void</link>                oil_subtract_f32                    (<link linkend="float">float</link> *d,
                                                         const <link linkend="float">float</link> *s1,
                                                         const <link linkend="float">float</link> *s2,
                                                         <link linkend="int">int</link> n);</programlisting>
<para>
Subtracts elements in <parameter>s2</parameter> from <parameter>s1</parameter> and places the result in <parameter>d</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara> destination
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s1</parameter>&nbsp;:</term>
<listitem><simpara> source 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&nbsp;:</term>
<listitem><simpara> source 2
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> number of elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
